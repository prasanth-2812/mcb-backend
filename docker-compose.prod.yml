version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mcb_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-secret}
      MYSQL_DATABASE: ${DB_NAME:-mcb}
      MYSQL_USER: ${DB_USER:-mcb_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secret}
    ports:
      - '${DB_PORT:-3306}:3306'
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --innodb-log-file-size=64M
      --max-connections=200
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-p${DB_PASSWORD:-secret}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcb_network

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: mcb_redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - mcb_network

  # API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: mcb_api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=${DB_NAME:-mcb}
      - DB_USER=${DB_USER:-root}
      - DB_PASSWORD=${DB_PASSWORD:-secret}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=4000
    ports:
      - '${PORT:-4000}:4000'
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_data:/usr/src/app/uploads
      - logs_data:/usr/src/app/logs
    env_file:
      - env.production
    networks:
      - mcb_network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4000/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: mcb_nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - uploads_data:/var/www/uploads
    depends_on:
      - api
    networks:
      - mcb_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local

networks:
  mcb_network:
    driver: bridge
